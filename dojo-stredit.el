;;;(eval-buffer)
;;;(dojo-start)

(defvar dojo-mode-map nil)

(defun dojo-start()
  "Start the dojo.  Mutates global state."
  (interactive)
  (dojo-setup-kbd!)
  (switch-to-buffer "dojo")
  (dojo-mode)
  (rainbow-blocks-mode)
  (rainbow-delimiters-mode-enable)
  (dojo-launch-puzzle (car dojo-puzzles)))

(defun dojo-instruction (text)
  "Insert the instruction passed as TEXT."
  (save-excursion
    (goto-char (point-max))
    (beginning-of-visual-line)
    (let ((inhibit-read-only t))
      (kill-whole-line)
      (insert text))))

(defun dojo-pos (row pos)
  "Goto to position in buffer.  ROW indicates rownumber starting with 1,
POS is the column position starting with 0."
  (goto-line row)
  (beginning-of-line)
  (forward-char pos))

(defun dojo-self ()
  "Insert letters that are typed."
  (self-insert-command 1))

(defun dojo-nl ()
  "Insert formated newline."
  (newline)
  (insert "  "))

(defun dojo-help! ()
  "Dojo help."
  (interactive)
  (dojo-instruction (concat  (dojo-step :instruction (car dojo-puzzles))
                             " --> "(dojo-step :kbd (car dojo-puzzles))))
        ;;;(mapc (lambda (k) (print (key-description k))) (where-is-internal (cdr (assoc :fun (second dojo-steps))) paredit-mode-map))
  )

(defun dojo-step (k col)
  "Return the current value given key K and puzzle COL."
  (cdr (assoc k (car (cdr (assoc :steps col))))))

(defun dojo-pop-step! ()
  "Remove the current step."
  (pop (alist-get :steps (car dojo-puzzles))))

(defun dojo-setup-kbd! ()
  "Initialize keyboard."
  (setq dojo-mode-map (make-sparse-keymap))
  (mapc
   '(lambda (kb) (define-key dojo-mode-map (kbd kb) 'ignore))
   '("<left>" "<right>" "<up>" "<down>" "<C-left>" "<C-right>"
     "<C-up>" "<C-down>" "<C-M-left>" "<C-M-right>" "<C-M-up>" "<C-M-down>"
     "<M-left>" "<M-right>" "<M-up>" "<M-down>" "C-f" "C-b" "M-f"
     "M-b" "C-p" "C-n" "M-n" "M-p" "C-/" "C-M-b" "C-M-f"
     "C-M-n" "C-M-u" "C-M-<up>" "C-k" "M-r" "M-k" "\""
     "M-S" "M-d" "M-@" "M-)" "M-(" "C-x C-SPC" "C-("
     "C-M-t" "C-M-y" ""
     ;;"C-[" produces an in error
     ))
  (define-key dojo-mode-map (kbd "C-h") 'dojo-help!)
  )

(defun dojo-launch-puzzle (puzzle)
  "Set up the first step in PUZZLE."
  (let ((inhibit-read-only t))
    (erase-buffer)
    (insert (cdr (assoc :code puzzle)))
    (paredit-reindent-defun)
    (dojo-instruction (dojo-step :instruction puzzle))
    (dojo-pos (cdr (assoc :start-row puzzle))
              (cdr (assoc :start-col puzzle)))
    (message (dojo-step :kbd puzzle))
    (local-set-key (kbd (dojo-step :kbd puzzle)) 'dojo-next)))

;;(length dojo-puzzles)

(defun dojo-next ()
  "The main loop.  Side effects.
Called each time the correct key is pressed."
  (interactive)
  ;; if not last step
  (if (cddr (assoc :steps  (car dojo-puzzles)))
      (let ((inhibit-read-only t))
        (funcall (dojo-step :fun (car dojo-puzzles)))
        (local-set-key (kbd (dojo-step :kbd (car dojo-puzzles))) 'ignore)
        (dojo-pop-step!)
        (dojo-instruction (dojo-step :instruction (car dojo-puzzles)))
        (local-set-key (kbd (dojo-step :kbd (car dojo-puzzles))) 'dojo-next)
        (paredit-reindent-defun))
    ;; if last, step launch next puzzle
    (local-set-key (kbd (dojo-step :kbd (car dojo-puzzles))) 'ignore)
    (pop dojo-puzzles)
    (if dojo-puzzles
        (dojo-launch-puzzle (car dojo-puzzles))
      (dojo-instruction "That was all of the puzzles! Well done!"))))

(define-derived-mode dojo-mode special-mode "dojo-mode"
  (setq-local comment-start "; ")
  (setq-local comment-end ""))

(defun swap (LIST el1 el2)
  "In LIST swap indices EL1 and EL2 in place. Code by John Kitchin at
http://kitchingroup.cheme.cmu.edu/blog/2014/09/06/Randomize-a-list-in-Emacs/"
  (let ((tmp (elt LIST el1)))
    (setf (elt LIST el1) (elt LIST el2))
    (setf (elt LIST el2) tmp)))


(defun shuffle (LIST)
  "Shuffle the elements in LIST shuffling is done in place.
Code by John Kitchin at
http://kitchingroup.cheme.cmu.edu/blog/2014/09/06/Randomize-a-list-in-Emacs/"
  (loop for i in (reverse (number-sequence 1 (1- (length LIST))))
        do (let ((j (random (+ i 1))))
             (swap LIST i j)))
  LIST)

(defun reverse-transpose-sexps (arg)
  "Code from https://emacs.stackexchange.com/questions/12799/move-form-up-and-down-on-paredit-mode
by Tu Do"
  (interactive "*p")
  (transpose-sexps (- arg))
  ;; when transpose-sexps can no longer transpose, it throws an error and code
  ;; below this line won't be executed. So, we don't have to worry about side
  ;; effects of backward-sexp and forward-sexp.
  ;;(backward-sexp (1+ arg))
  ;;(forward-sexp 1)
  )


(setq dojo-puzzles-for-testing
      (shuffle
       (list
        '((:code . "(setq coll 1 2 3 4 5 6 7 8 9)\n\n\nxxxx")
          (:start-row . 1)
          (:start-col . 28)
          (:steps .
                  (((:kbd . "[") (:fun . paredit-open-bracket) (:instruction . "Open a bracket")) 
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp once more!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf again"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf again"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf one more time"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp once more!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf again"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf again"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf one more time"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp once more!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf again"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf again"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf one more time"))
                   ((:kbd . "C-/") (:fun . undo) (:instruction . "Nice, undo once to do another puzzle!")))))

        )))



(setq dojo-puzzles
      (shuffle
       (list
        '((:code . "(setq coll 1 2 3 4 5 6 7 8 9)\n\n\nxxxx")
          (:start-row . 1)
          (:start-col . 28)
          (:steps .
                  (((:kbd . "[") (:fun . paredit-open-bracket) (:instruction . "Open a bracket")) 
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp once more!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf again"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf again"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf one more time"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp once more!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf again"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf again"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf one more time"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp backward!"))
                   ((:kbd . "C-(") (:fun . paredit-backward-slurp-sexp) (:instruction . "Slurp once more!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf backward!"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf again"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf again"))
                   ((:kbd . "C-[") (:fun . paredit-backward-barf-sexp) (:instruction . "Barf one more time"))
                   ((:kbd . "C-/") (:fun . undo) (:instruction . "Nice, undo once to do another puzzle!")))))

        
        '((:code . "(operator (lambda () (a)) (fun b) (fun c) (fun d))\n\n\nxxx")
          (:start-row . 1)
          (:start-col . 0)
          (:steps .
                  (((:kbd . "C-M-d") (:fun . paredit-forward-down) (:instruction . "Go down into the sexp"))
                   ((:kbd . "C-M-f") (:fun . paredit-forward) (:instruction . "Go to (fun b)"))
                   ((:kbd . "C-M-f") (:fun . paredit-forward) (:instruction . "Go to (fun b)"))
                   ((:kbd . "C-M-t") (:fun . (lambda () (transpose-sexps 1))) (:instruction . "Move (lambda () (a))) to second position"))
                   ((:kbd . "C-M-t") (:fun . (lambda () (transpose-sexps 1))) (:instruction . "Move (lambda () (a))) to third position"))
                   ((:kbd . "C-M-t") (:fun . (lambda () (transpose-sexps 1))) (:instruction . "Move (lambda () (a))) to fourth position"))
                   ((:kbd . "C-M-y") (:fun . (lambda () (reverse-transpose-sexps 1))) (:instruction . "Now take it the other direction"))
                   ((:kbd . "C-M-y") (:fun . (lambda () (reverse-transpose-sexps 1))) (:instruction . "One more step"))
                   ((:kbd . "C-M-y") (:fun . (lambda () (reverse-transpose-sexps 1))) (:instruction . "And the final"))
                   ((:kbd . "C-M-t") (:fun . (lambda () (transpose-sexps 1))) (:instruction . "Move (lambda () (a))) to second position"))
                   ((:kbd . "C-M-t") (:fun . (lambda () (transpose-sexps 1))) (:instruction . "Move (lambda () (a))) to third position"))
                   ((:kbd . "C-M-t") (:fun . (lambda () (transpose-sexps 1))) (:instruction . "Move (lambda () (a))) to fourth position"))
                   ((:kbd . "C-M-y") (:fun . (lambda () (reverse-transpose-sexps 1))) (:instruction . "Now take it the other direction"))
                   ((:kbd . "C-M-y") (:fun . (lambda () (reverse-transpose-sexps 1))) (:instruction . "One more step"))
                   ((:kbd . "C-M-y") (:fun . (lambda () (reverse-transpose-sexps 1))) (:instruction . "And the final"))
                   ((:kbd . "C-M-t") (:fun . (lambda () (transpose-sexps 1))) (:instruction . "Move (lambda () (a))) to second position"))
                   ((:kbd . "C-M-t") (:fun . (lambda () (transpose-sexps 1))) (:instruction . "Move (lambda () (a))) to third position"))
                   ((:kbd . "C-M-t") (:fun . (lambda () (transpose-sexps 1))) (:instruction . "Move (lambda () (a))) to fourth position"))
                   ((:kbd . "C-M-y") (:fun . (lambda () (reverse-transpose-sexps 1))) (:instruction . "Now take it the other direction"))
                   ((:kbd . "C-M-y") (:fun . (lambda () (reverse-transpose-sexps 1))) (:instruction . "One more step"))
                   ((:kbd . "C-M-y") (:fun . (lambda () (reverse-transpose-sexps 1))) (:instruction . "And the final"))
                   ((:kbd . "C-/") (:fun . undo) (:instruction . "Nice, undo once to do another puzzle!")))))
        
        '((:code . "(operator (fun a)\n  (fun b)\n  (fun c)\n  (fun d))\n\n\nxxx")
          (:start-row . 1)
          (:start-col . 0)
          (:steps .
                  (((:kbd . "C-M-d") (:fun . paredit-forward-down) (:instruction . "Go down into the sexp"))
                   ((:kbd . "C-M-f") (:fun . paredit-forward) (:instruction . "Go to (fun b)"))
                   ((:kbd . "C-M-f") (:fun . paredit-forward) (:instruction . "Go to (fun b)"))
                   ((:kbd . "C-M-t") (:fun . (lambda () (transpose-sexps 1))) (:instruction . "Move (fun a) to second position"))
                   ((:kbd . "C-M-t") (:fun . (lambda () (transpose-sexps 1))) (:instruction . "Move (fun a) to third position"))
                   ((:kbd . "C-M-t") (:fun . (lambda () (transpose-sexps 1))) (:instruction . "Move (fun a) to fourth position"))
                   ((:kbd . "C-M-y") (:fun . (lambda () (reverse-transpose-sexps 1))) (:instruction . "Now take it the other direction"))
                   ((:kbd . "C-M-y") (:fun . (lambda () (reverse-transpose-sexps 1))) (:instruction . "One more step"))
                   ((:kbd . "C-M-y") (:fun . (lambda () (reverse-transpose-sexps 1))) (:instruction . "And the final"))
                   ((:kbd . "C-M-t") (:fun . (lambda () (transpose-sexps 1))) (:instruction . "Move (fun a) to second position"))
                   ((:kbd . "C-M-t") (:fun . (lambda () (transpose-sexps 1))) (:instruction . "Move (fun a) to third position"))
                   ((:kbd . "C-M-t") (:fun . (lambda () (transpose-sexps 1))) (:instruction . "Move (fun a) to fourth position"))
                   ((:kbd . "C-M-y") (:fun . (lambda () (reverse-transpose-sexps 1))) (:instruction . "Now take it the other direction"))
                   ((:kbd . "C-M-y") (:fun . (lambda () (reverse-transpose-sexps 1))) (:instruction . "One more step"))
                   ((:kbd . "C-M-y") (:fun . (lambda () (reverse-transpose-sexps 1))) (:instruction . "And the final"))
                   ((:kbd . "C-M-t") (:fun . (lambda () (transpose-sexps 1))) (:instruction . "Move fun a to second position"))
                   ((:kbd . "C-M-t") (:fun . (lambda () (transpose-sexps 1))) (:instruction . "Move fun a to third position"))
                   ((:kbd . "C-M-t") (:fun . (lambda () (transpose-sexps 1))) (:instruction . "Move fun a to fourth position"))
                   ((:kbd . "C-M-y") (:fun . (lambda () (reverse-transpose-sexps 1))) (:instruction . "Now take it the other direction"))
                   ((:kbd . "C-M-y") (:fun . (lambda () (reverse-transpose-sexps 1))) (:instruction . "One more step"))
                   ((:kbd . "C-M-y") (:fun . (lambda () (reverse-transpose-sexps 1))) (:instruction . "And the final"))
                   ((:kbd . "C-/") (:fun . undo) (:instruction . "Nice, undo once to do another puzzle!")))))


        '((:code . "(defun my-command ()\n  (interactie)\n  (do-some-things)\n  (do-more-things)\n  (conclude-doing-things))\n\n\nxxx")
          (:start-row . 2)
          (:start-col . 14)
          (:steps . (
                     ((:kbd . "RET") (:fun . dojo-nl) (:instruction . "Create a new line"))
                     ((:kbd . "M-(") (:fun . paredit-wrap-round) (:instruction . "Wrap next statement in parens!"))
                     ((:kbd . "f") (:fun . dojo-self) (:instruction . "Type the function 'func'")) 
                     ((:kbd . "u") (:fun . dojo-self) (:instruction . "Type the function 'func'")) 
                     ((:kbd . "n") (:fun . dojo-self) (:instruction . "Type the function 'func'")) 
                     ((:kbd . "c") (:fun . dojo-self) (:instruction . "Type the function 'func'")) 
                     ((:kbd . "C-)") (:fun . paredit-forward-slurp-sexp) (:instruction . "Slurp forward!"))
                     ((:kbd . "C-)") (:fun . paredit-forward-slurp-sexp) (:instruction . "Slurp once more!"))
                     ((:kbd . "C-]") (:fun . paredit-forward-barf-sexp) (:instruction . "Barf forward!"))
                     ((:kbd . "C-]") (:fun . paredit-forward-barf-sexp) (:instruction . "Barf again"))
                     ((:kbd . "C-]") (:fun . paredit-forward-barf-sexp) (:instruction . "Barf one more time"))
                     ((:kbd . "C-)") (:fun . paredit-forward-slurp-sexp) (:instruction . "Slurp forward!"))
                     ((:kbd . "C-)") (:fun . paredit-forward-slurp-sexp) (:instruction . "Slurp again!"))
                     ((:kbd . "C-)") (:fun . paredit-forward-slurp-sexp) (:instruction . "Slurp and again!"))
                     ((:kbd . "C-]") (:fun . paredit-forward-barf-sexp) (:instruction . "Barf forward!"))
                     ((:kbd . "C-]") (:fun . paredit-forward-barf-sexp) (:instruction . "Barf once more!"))
                     ((:kbd . "C-]") (:fun . paredit-forward-barf-sexp) (:instruction . "And again"))
                     ((:kbd . "C-)") (:fun . paredit-forward-slurp-sexp) (:instruction . "Slurp forward!"))
                     ((:kbd . "C-)") (:fun . paredit-forward-slurp-sexp) (:instruction . "Slurp again!"))
                     ((:kbd . "C-)") (:fun . paredit-forward-slurp-sexp) (:instruction . "Slurp and again"))
                     ((:kbd . "C-]") (:fun . paredit-forward-barf-sexp) (:instruction . "Now barf forward!"))
                     ((:kbd . "C-]") (:fun . paredit-forward-barf-sexp) (:instruction . "Barf again!"))
                     ((:kbd . "C-]") (:fun . paredit-forward-barf-sexp) (:instruction . "Barf and again!"))
                     ((:kbd . "C-)") (:fun . paredit-forward-slurp-sexp) (:instruction . "Slurp forward!"))
                     ((:kbd . "C-)") (:fun . paredit-forward-slurp-sexp) (:instruction . "And again!"))
                     ((:kbd . "C-)") (:fun . paredit-forward-slurp-sexp) (:instruction . "Slurp one more time!"))
                     ((:kbd . "C-]") (:fun . paredit-forward-barf-sexp) (:instruction . "Now barf forward!"))
                     ((:kbd . "C-]") (:fun . paredit-forward-barf-sexp) (:instruction . "Barf again!"))
                     ((:kbd . "C-]") (:fun . paredit-forward-barf-sexp) (:instruction . "And again!"))
                     ((:kbd . "C-)") (:fun . paredit-forward-slurp-sexp) (:instruction . "Slurp forward!"))
                     ((:kbd . "C-)") (:fun . paredit-forward-slurp-sexp) (:instruction . "And again!"))
                     ((:kbd . "C-)") (:fun . paredit-forward-slurp-sexp) (:instruction . "Slurp one more time!"))
                     ((:kbd . "C-)") (:fun . undo) (:instruction . "Well Done, slurp one more time, to do another puzzle!")))))
        
        '((:code . "(defun my-other-command () \n  (when (and (this-predicate) \n        (that-predicate)) \n    (do-something) \n    (do-some-more) \n    (do-a-third-thing))) \n\n\nxxx")
          (:start-row . 3)
          (:start-col . 13)
          (:steps . (
                     ((:kbd . "M-r") (:fun . paredit-raise-sexp) (:instruction . "Raise the second predicate"))
                     ((:kbd . "C-/") (:fun . undo) (:instruction . "Good, now undo!"))
                     ((:kbd . "C-M-b") (:fun . paredit-backward) (:instruction . "Go to the previous predicate"))
                     ((:kbd . "M-r") (:fun . paredit-raise-sexp) (:instruction . "Raise the first predicate"))
                     ((:kbd . "C-/") (:fun . undo) (:instruction . "And again undo"))
                     ((:kbd . "C-M-n") (:fun . paredit-forward-up) (:instruction . "Move forward to next sexp and up"))
                     ((:kbd . "C-M-d") (:fun . paredit-forward-down) (:instruction . "Move forward to next sexp"))
                     ((:kbd . "C-M-u") (:fun . paredit-backward-up) (:instruction . "Move back to before the beginning of the sexp"))
                     ((:kbd . "M-r") (:fun . paredit-raise-sexp) (:instruction . "Raise that sexp and delete all other siblings"))
                     ((:kbd . "C-/") (:fun . undo) (:instruction . "Now undo!"))
                     ((:kbd . "M-<up>") (:fun . paredit-splice-sexp-killing-backward) (:instruction . "Kill backwards and keep the following siblings"))
                     ((:kbd . "C-/") (:fun . undo) (:instruction . "And undo!"))
                     ((:kbd . "C-/") (:fun . undo) (:instruction . "Nice, undo once more to do another puzzle!")))))

        '((:code . "(defun my-other-command () \n  (when (and (this-predicate) \n        (that-predicate)) \n    (do-something) \n    (do-some-more) \n    (do-a-third-thing))) \n\n\nxxx")
          ;;(defun my-other-command () 
          ;;  (when (and (this-predicate)
          ;;             (that-predicate))
          ;;    (do-something)
          ;;    (do-some-mor
          ;;    (do-a-third-thing)))"

          (:start-row . 3)
          (:start-col . 13)
          (:steps . (
                     ((:kbd . "M-r") (:fun . paredit-raise-sexp) (:instruction . "Raise the second predicate"))
                     ((:kbd . "C-M-f") (:fun . paredit-forward) (:instruction . "Go to the next expression"))
                     ((:kbd . "C-M-k") (:fun . kill-sexp) (:instruction . "Delete next sexp"))
                     ((:kbd . "C-M-k") (:fun . kill-sexp) (:instruction . "And next"))
                     ((:kbd . "C-M-k") (:fun . kill-sexp) (:instruction . "And next"))
                     ((:kbd . "C-/") (:fun . (lambda () (undo 3))) (:instruction . "And undo"))
                     ((:kbd . "C-M-k") (:fun . kill-sexp) (:instruction . "Delete next sexp"))
                     ((:kbd . "C-M-k") (:fun . kill-sexp) (:instruction . "And next"))
                     ((:kbd . "C-M-k") (:fun . kill-sexp) (:instruction . "And next"))
                     ((:kbd . "C-/") (:fun . (lambda () (undo 3))) (:instruction . "And undo"))
                     ((:kbd . "C-M-k") (:fun . kill-sexp) (:instruction . "Delete next sexp"))
                     ((:kbd . "C-M-k") (:fun . kill-sexp) (:instruction . "And next"))
                     ((:kbd . "C-M-k") (:fun . kill-sexp) (:instruction . "And next"))
                     ((:kbd . "C-/") (:fun . (lambda () (undo 3))) (:instruction . "And undo"))
                     ((:kbd . "C-M-k") (:fun . kill-sexp) (:instruction . "Delete next sexp"))
                     ((:kbd . "C-M-k") (:fun . kill-sexp) (:instruction . "And next"))
                     ((:kbd . "C-M-k") (:fun . kill-sexp) (:instruction . "And next"))
                     ((:kbd . "C-/") (:fun . (lambda () (undo 3))) (:instruction . "And undo"))
                     ((:kbd . "C-/") (:fun . undo) (:instruction . "Nice, undo once more to do another puzzle!")))))
        

        
        '((:code . "(defun another-command () \n  (when (and (some-predicate) \n        (some-other-predicate)) \n    (let ((v (calculate-v))\n         (x (calculate-x)))\n     (do-that-thing) \n     (do-something-more)\n     (do-even-more)))) \n\n\nxxx")
          (:start-row . 6)
          (:start-col . 6)
          (:steps .
                  (
                   ((:kbd . "M-?") (:fun . paredit-convolute-sexp) (:instruction . "Convolute the let block before the when block"))
                   ((:kbd . "C-/") (:fun . undo) (:instruction . "Undo!"))
                   ((:kbd . "M-?") (:fun . paredit-convolute-sexp) (:instruction . "Again convolute the let block before the when block"))
                   ((:kbd . "C-/") (:fun . undo) (:instruction . "And undo!"))
                   ((:kbd . "C-n") (:fun . next-line) (:instruction . "move to the next sexp"))
                   ((:kbd . "M-?") (:fun . paredit-convolute-sexp) (:instruction . "Convolute the let block before the when block"))
                   ((:kbd . "C-/") (:fun . undo) (:instruction . "Now undo!"))
                   ((:kbd . "M-?") (:fun . paredit-convolute-sexp) (:instruction . "Move the current sexp block to before the when block"))
                   ((:kbd . "C-/") (:fun . undo) (:instruction . "Undo agian!"))
                   ((:kbd . "M-?") (:fun . paredit-convolute-sexp) (:instruction . "Once more move the current sexp block to before the when block"))
                   ((:kbd . "C-/") (:fun . undo) (:instruction . "And another undo!"))
                   ((:kbd . "C-/") (:fun . undo) (:instruction . "Haa, undo one more time, to do another puzzle!")))))

        '((:code . "(defun another-command () \n  (when (and (some-predicate) \n        (some-other-predicate)) \n    (let ((v (calculate-v))\n         (x (calculate-x)))\n     (do-that-thing) \n     (do-something-more)\n     (do-even-more)))) \n\n\nxxx")
          ;; (defun another-command () 
          ;;   (when (and (some-predicate) 
          ;;              (some-other-predicate)) 
          ;;     (let ((v (calculate-v))
          ;;           (x (calculate-x)))
          ;;       (do-that-thing) 
          ;;       (do-something-more)
          ;;       (do-even-more)))) 


          (:start-row . 1)
          (:start-col . 0)
          (:steps .
                  (
                   ((:kbd . "C-M-f") (:fun . paredit-forward) (:instruction . "Move to the end of the top expression"))
                   ((:kbd . "C-M-p") (:fun . paredit-backward-down) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-p") (:fun . paredit-backward-down) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-p") (:fun . paredit-backward-down) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-p") (:fun . paredit-backward-down) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-u") (:fun . paredit-backward-up) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-p") (:fun . paredit-backward-down) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-u") (:fun . paredit-backward-up) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-p") (:fun . paredit-backward-down) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-u") (:fun . paredit-backward-up) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-p") (:fun . paredit-backward-down) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-p") (:fun . paredit-backward-down) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-p") (:fun . paredit-backward-down) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-u") (:fun . paredit-backward-up) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-u") (:fun . paredit-backward-up) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-p") (:fun . paredit-backward-down) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-p") (:fun . paredit-backward-down) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-u") (:fun . paredit-backward-up) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-u") (:fun . paredit-backward-up) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-u") (:fun . paredit-backward-up) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-u") (:fun . paredit-backward-up) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-p") (:fun . paredit-backward-down) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-p") (:fun . paredit-backward-down) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-u") (:fun . paredit-backward-up) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-p") (:fun . paredit-backward-down) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-u") (:fun . paredit-backward-up) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-u") (:fun . paredit-backward-up) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-u") (:fun . paredit-backward-up) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-p") (:fun . paredit-backward-down) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-u") (:fun . paredit-backward-up) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-M-u") (:fun . paredit-backward-up) (:instruction . "Now walk back to the top touching only and every paren on the way"))
                   ((:kbd . "C-/") (:fun . undo) (:instruction . "Haa, undo once and to do another puzzle!")))))
        
        '((:code . "(defun some-command () \n  (do-stuff \"this here is a string\" 123)\n  (do-stuff (more-stuff \"something\"\n                       \"and more\")))\n\n\nxxx")
          (:start-row . 2)
          (:start-col . 11)
          (:steps .
                  (((:kbd . "C-k") (:fun . paredit-kill) (:instruction . "Kill the rest in current sexp but keep the tree intact"))
                   ((:kbd . "C-/") (:fun . undo) (:instruction . "Undo the change!"))
                   ((:kbd . "M-f") (:fun . forward-word) (:instruction . "Move forward behind the word \"this\""))
                   ((:kbd . "C-k") (:fun . paredit-kill) (:instruction . "Kill the rest of the quote but keeeping it intact"))
                   ((:kbd . "C-/") (:fun . undo) (:instruction . "Now undo!"))
                   ((:kbd . "C-k") (:fun . paredit-kill) (:instruction . "Kill it again!"))
                   ((:kbd . "C-/") (:fun . undo) (:instruction . "Undo again!"))
                   ((:kbd . "C-k") (:fun . paredit-kill) (:instruction . "Once more!"))
                   ((:kbd . "C-/") (:fun . undo) (:instruction . "And undo again!"))
                   ((:kbd . "C-n") (:fun . next-line) (:instruction . "move down"))
                   ((:kbd . "C-k") (:fun . paredit-kill) (:instruction . "Kill from there"))
                   ((:kbd . "C-/") (:fun . undo) (:instruction . "Undo!"))
                   ((:kbd . "C-M-u") (:fun . paredit-backward-up) (:instruction . "Move backward up to parent"))
                   ((:kbd . "C-k") (:fun . paredit-kill) (:instruction . "Kill from there"))
                   ((:kbd . "C-/") (:fun . undo) (:instruction . "Undo!"))
                   ((:kbd . "C-p") (:fun . previous-line) (:instruction . "move up"))
                   ((:kbd . "M-f") (:fun . forward-word) (:instruction . "Move forward a word"))
                   ((:kbd . "M-f") (:fun . forward-word) (:instruction . "One more"))
                   ((:kbd . "\"") (:fun . paredit-doublequote) (:instruction . "Add a dobule quote without breaking the validity of the syntax"))
                   ((:kbd . "\"") (:fun . paredit-doublequote) (:instruction . "It is escaped. Add one more!"))
                   ((:kbd . "C-/") (:fun . (lambda () (undo 2))) (:instruction . "Undo!"))
                   ((:kbd . "M-S") (:fun . paredit-split-sexp) (:instruction . "Now create two strings, by splitting it there!"))
                   ((:kbd . "M-S") (:fun . paredit-split-sexp) (:instruction . "Good, now split the sexp into two it two from that postiotion!"))
                   ((:kbd . "C-/") (:fun . (lambda () (undo 2))) (:instruction . "And again undo!"))
                   ((:kbd . "M-S") (:fun . paredit-split-sexp) (:instruction . "Split strings again!"))
                   ((:kbd . "M-S") (:fun . paredit-split-sexp) (:instruction . "And the sexps!"))
                   ((:kbd . "M-\\") (:fun . delete-horizontal-space) (:instruction . "Remove white-space"))
                   ((:kbd . "RET") (:fun . dojo-nl) (:instruction .  "Move it to the next line!"))
                   ((:kbd . "C-M-d") (:fun . paredit-forward-down) (:instruction .  "Move into the sexp!"))
                   ((:kbd . "d") (:fun . dojo-self) (:instruction . "Type the function 'do-stuff '")) 
                   ((:kbd . "o") (:fun . dojo-self) (:instruction . "Type the function 'do-stuff '")) 
                   ((:kbd . "-") (:fun . dojo-self) (:instruction . "Type the function 'do-stuff '")) 
                   ((:kbd . "s") (:fun . dojo-self) (:instruction . "Type the function 'do-stuff '")) 
                   ((:kbd . "t") (:fun . dojo-self) (:instruction . "Type the function 'do-stuff '")) 
                   ((:kbd . "u") (:fun . dojo-self) (:instruction . "Type the function 'do-stuff '")) 
                   ((:kbd . "f") (:fun . dojo-self) (:instruction . "Type the function 'do-stuff '")) 
                   ((:kbd . "f") (:fun . dojo-self) (:instruction . "Type the function 'do-stuff '")) 
                   ((:kbd . "SPC") (:fun . dojo-self) (:instruction . "Type the function 'do-stuff '"))
                   ((:kbd . "SPC") (:fun . undo) (:instruction . "Done! Press space to do another puzzle")))))

        ;; ------------
        ;; '((:code . "(defun my-other-command () \n  (when (and (this-predicate) \n        (that-predicate)) \n    (do-something) \n    (do-some-more) \n    (do-a-third-thing))) \n\n\nxxx")
        ;;   (:start-row . 3)
        ;;   (:start-col . 13)
        ;;   (:steps .
        ;;           (
        ;;            ((:kbd . "M-r") (:fun . raise-sexp) (:instruction . "Raise the second predicate"))
        ;;            ((:kbd . "C-/") (:fun . undo) (:instruction . "Undo!"))
        ;;            ((:kbd . "C-M-b") (:fun . paredit-backward) (:instruction . "Go to the previous predicate"))
        ;;            ((:kbd . "M-r") (:fun . raise-sexp) (:instruction . "Raise the first predicate"))
        ;;            ((:kbd . "C-/") (:fun . undo) (:instruction . "Undo!"))
        ;;            ((:kbd . "C-M-n") (:fun . paredit-forward-up) (:instruction . "Move forward to next sexp and up"))
        ;;            ((:kbd . "C-M-d") (:fun . paredit-forward) (:instruction . "Move forward and down to next sexp"))
        ;;            ((:kbd . "C-M-u") (:fun . paredit-backward) (:instruction . "Move back to before the beginning of the sexp"))
        ;;            ((:kbd . "M-r") (:fun . raise-sexp) (:instruction . "Raise that sexp and delete all other siblings"))
        ;;            ((:kbd . "C-/") (:fun . undo) (:instruction . "Undo!"))
        ;;            ((:kbd . "M-<up>") (:fun . paredit-splice-sexp-killing-backward) (:instruction . "Kill backwards and keep the following siblings"))
        ;;            ((:kbd . "C-/") (:fun . undo) (:instruction . "Undo!"))
        ;;            ((:kbd . "C-/") (:fun . undo) (:instruction . "Well Done, undo one more time, to go to do another puzzle!")))))

        ;; '((:code . "(ns adventur-engine.execute-room\n (:use adventure-engine.utils)\n (:require [adventur-core.ast-traverser :as ast])\n (:require [adventure-core.rooms :as r])\n (:require [adventur-engine.math :as math])\n (:require [adventure-engine.require4ments :as reqs]))\n\n\nxxx")
        ;;   (:start-row . 3) 
        ;;   (:start-col 52)
        ;;   (:steps . (
        ;;              ((:kbd . "C-k") (:fun . paredit-kill) (:instruction . "Move the previous row up to the point"))
        ;;              ((:kbd . "M-\\") (:fun . delete-horizontal-space) (:instruction . "Delete whitespace"))
        ;;              ((:kbd . "M-J") (:fun . paredit-join-sexps) (:instruction . "Join the two sexps"))
        ;;              ((:kbd . "C-/") (:fun . undo) (:instruction . "Undo!"))
        ;;              ((:kbd . "RET") (:fun . dojo-nl) (:instruction .  "Move it to the next line!"))
        ;;              ((:kbd . "SPC") (:fun . dojo-self) (:instruction .  "Add a space"))
        ;;              ((:kbd . "SPC") (:fun . dojo-self) (:instruction .  "Another"))
        ;;              ((:kbd . "M-@") (:fun . mc/mark-next-like-this) (:instruction . "grab next"))
        ;;              ((:kbd . "M-@") (:fun . mc/mark-next-like-this) (:instruction . "grab next"))
        ;;              ((:kbd . "M-@") (:fun . mc/mark-next-like-this) (:instruction . "and next"))
        ;;              ((:kbd . "M-J") (:fun . paredit-join-sexps) (:instruction . "Join them"))
        ;;              ((:kbd . "M-d") (:fun . kill-word) (:instruction . "Kill the keywords"))
        ;;              ((:kbd . "M-i") (:fun . paredit-indent-defun) (:instruction . "Indent"))
        ;;              ((:kbd . "SPC") (:fun . dojo-self) (:instruction . "Type the function 'do-stuff '")) 
        ;;              ((:kbd . "SPC") (:fun . undo) (:instruction . "Well done! Press SPC one more time, to do another puzzle!"))
        ;;              )))
        )))

;; to figure out the patterns
;; (defun my-other-command ()
;;   (when (and (this-predicate)
;;              (that-predicate))
;;     (do-something)
;;     (do-some-more)
;;     (do-a-third-thing)))

